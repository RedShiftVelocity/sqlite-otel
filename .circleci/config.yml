version: 2.1

executors:
  go-executor:
    docker:
      - image: cimg/go:1.21
    working_directory: ~/repo
    environment:
      BINARY_NAME: sqlite-otel-collector

jobs:
  test:
    executor: go-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
            - go-mod-v1-
      - run:
          name: Download dependencies
          command: go mod download
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - ~/go/pkg/mod
      - run:
          name: Run go vet
          command: go vet ./...
      - run:
          name: Run tests
          command: |
            set -e
            mkdir -p /tmp/test-results
            go test -race -coverprofile=coverage.out -v ./... | tee /tmp/test-results/go-test.out
      - run:
          name: Generate coverage report
          command: |
            set -e
            go tool cover -html=coverage.out -o coverage.html
            echo "Coverage report generated"
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: coverage.html
          destination: coverage
      - store_artifacts:
          path: coverage.out
          destination: coverage.out

  build:
    executor: go-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
            - go-mod-v1-
      - run:
          name: Download dependencies
          command: go mod download
      - run:
          name: Build for current platform
          command: |
            set -e
            make build
            # Verify binary was created
            ls -la ${BINARY_NAME}
      - run:
          name: Build for all platforms
          command: |
            set -e
            make build-all
            ls -la ${BINARY_NAME}-*
      - run:
          name: Collect binaries
          command: |
            set -e
            mkdir -p binaries
            cp ${BINARY_NAME}* binaries/
      - store_artifacts:
          path: binaries/
          destination: binaries
      - persist_to_workspace:
          root: .
          paths:
            - binaries/

  release:
    executor: go-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Create release archives
          command: |
            set -e
            mkdir -p releases
            cd binaries
            for file in ${BINARY_NAME}*; do
              if [ -f "$file" ]; then
                # Extract platform suffix from filename
                platform_suffix="${file#${BINARY_NAME}}"
                # Create archive with version before platform
                archive_name="${BINARY_NAME}-${CIRCLE_TAG}${platform_suffix}.tar.gz"
                tar czf "../releases/${archive_name}" "$file"
                echo "Created releases/${archive_name}"
              fi
            done
      - store_artifacts:
          path: releases/
          destination: releases

workflows:
  version: 2
  test-and-build:
    jobs:
      - test:
          filters:
            branches:
              only: /.*/
            tags:
              only: /.*/
      - build:
          requires:
            - test
          filters:
            branches:
              only: /.*/
            tags:
              only: /.*/
      - release:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
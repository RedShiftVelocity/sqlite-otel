version: 2.1

# SQLite OTEL Collector CI Configuration
#
# DOCKER TESTING (to save CircleCI credits):
# - Regular development: Fast build + test only (no Docker)  
# - Docker testing: Only runs for version tags (v1.0.0) or branches starting with "docker/"
# - Example: Create branch "docker/test-new-feature" to test Docker changes

commands:
  setup_go_modules:
    steps:
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
            - go-mod-v1-
      - run:
          name: Download dependencies
          command: go mod download
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - ~/go/pkg/mod

executors:
  go-executor:
    docker:
      - image: cimg/go:1.21.6
    working_directory: ~/repo
  
  docker-executor:
    docker:
      - image: cimg/go:1.21.6
    working_directory: ~/repo

jobs:
  # First: Build the application
  build:
    executor: go-executor
    steps:
      - checkout
      - setup_go_modules
      - run:
          name: Build current platform binary
          command: |
            set -e
            echo "Building sqlite-otel binary..."
            make build
            # Verify binary was created
            if [ ! -f "sqlite-otel" ]; then
              echo "Error: Binary sqlite-otel not found after build"
              exit 1
            fi
            echo "Binary built successfully: $(ls -la sqlite-otel)"
      - run:
          name: Build for all platforms
          command: |
            set -e
            echo "Building for all platforms..."
            make build-all
            echo "Cross-platform build complete:"
            ls -la dist/
      - run:
          name: Test binary execution
          command: |
            set -e
            echo "Testing binary execution..."
            ./sqlite-otel --version
            echo "Binary executes successfully"
      - run:
          name: Collect binaries
          command: |
            set -e
            mkdir -p binaries
            cp sqlite-otel binaries/
            cp dist/* binaries/ 2>/dev/null || true
            echo "Collected binaries:"
            ls -la binaries/
      - store_artifacts:
          path: binaries/
          destination: binaries
      - persist_to_workspace:
          root: .
          paths:
            - sqlite-otel
            - binaries/
            - dist/

  # Second: Run tests (after successful build)
  test:
    executor: go-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup_go_modules
      - run:
          name: Run go vet
          command: |
            echo "Running go vet..."
            go vet ./...
      - run:
          name: Install test reporter
          command: go install github.com/jstemmer/go-junit-report/v2@latest
      - run:
          name: Run tests with race detection
          command: |
            set -e
            echo "Running tests with race detection..."
            mkdir -p /tmp/test-results
            # Run tests and capture both stdout and exit code
            go test -race -coverprofile=coverage.out -v ./... 2>&1 | tee /tmp/test-results/go-test.out
            # Capture the exit code from go test (not tee)
            test_exit_code=${PIPESTATUS[0]}
            # Convert to JUnit XML format for CircleCI
            cat /tmp/test-results/go-test.out | go-junit-report -set-exit-code > /tmp/test-results/junit.xml
            # Exit with the original test exit code
            exit $test_exit_code
      - run:
          name: Generate coverage report
          command: |
            set -e
            echo "Generating coverage report..."
            go tool cover -html=coverage.out -o coverage.html
            echo "Coverage report generated"
            # Display coverage summary
            go tool cover -func=coverage.out | tail -1
      - run:
          name: Test binary functionality
          command: |
            set -e
            echo "Testing binary functionality..."
            # Start the binary in background
            timeout 5 ./sqlite-otel --port 0 --db-path ./test.db || true
            echo "Binary functionality test completed"
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: coverage.html
          destination: coverage
      - store_artifacts:
          path: coverage.out
          destination: coverage.out

  # Third: Build and validate Docker container (minimal test)
  docker-build-and-test:
    machine:
      image: ubuntu-2204:2024.01.1
    resource_class: medium
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Docker environment check
          command: |
            echo "Checking Docker environment..."
            docker --version
            docker info
            echo "Available space:"
            df -h
            echo "Files in current directory:"
            ls -la
      - run:
          name: Build Docker image only
          command: |
            set -e
            echo "Building Docker image..."
            
            # Build with verbose output for debugging
            docker build -t sqlite-otel-collector:test . --no-cache --progress=plain
            
            echo "✅ Docker image built successfully"
            docker images sqlite-otel-collector:test
            
            # Test that image can run basic command
            echo "Testing basic container execution..."
            docker run --rm sqlite-otel-collector:test --version
            echo "✅ Container basic execution test passed"

  # Fourth: Create release (only for tags)
  release:
    executor: go-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Create release archives
          command: |
            echo "Creating release archives..."
            make release
            echo "Release archives created:"
            ls -la releases/
      - store_artifacts:
          path: releases/
          destination: releases

workflows:
  version: 2.1
  
  # Fast workflow for regular development (no Docker)
  build-and-test:
    jobs:
      - build:
          filters:
            branches:
              only: /.*/
              ignore: 
                - /docker\/.*/
            tags:
              ignore: /.*/
      - test:
          requires:
            - build
          filters:
            branches:
              only: /.*/
              ignore: 
                - /docker\/.*/
            tags:
              ignore: /.*/
  
  # Docker testing for docker/* branches and version tags
  docker-workflow:
    jobs:
      - build:
          filters:
            branches:
              only: /docker\/.*/
            tags:
              only: /^v.*/
      - test:
          requires:
            - build
          filters:
            branches:
              only: /docker\/.*/
            tags:
              only: /^v.*/
      - docker-build-and-test:
          requires:
            - test
          filters:
            branches:
              only: /docker\/.*/
            tags:
              only: /^v.*/
      - release:
          requires:
            - docker-build-and-test
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
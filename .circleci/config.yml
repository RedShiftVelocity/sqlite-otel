version: 2.1

# SQLite OTEL Collector CI Configuration
#
# OPTIMIZED WORKFLOWS (to save CircleCI credits):
# - Regular development: Fast build + test only (no Docker, no DEB, no RPM packaging)  
# - Main branch: Build + test + Docker publish (development images with -dev suffix)
# - Docker testing: Only runs for version tags (v1.0.0) or branches starting with "docker/"
# - DEB packaging: Only runs for version tags (v1.0.0) or branches starting with "deb/"
# - RPM packaging: Only runs for version tags (v1.0.0) or branches starting with "rpm/"
# 
# Docker Publishing Strategy:
# - Tags (v1.0.0): Stable releases → ghcr.io/owner/repo:v1.0.0 + latest
# - Main branch: Development builds → ghcr.io/owner/repo:v0.7.92-dev  
# - Docker branches: Feature builds → ghcr.io/owner/repo:v0.7.92-dev-feature-name
#
# Examples:
# - Create branch "docker/test-new-feature" to test Docker changes
# - Create branch "deb/test-packaging" to test DEB package changes
# - Create branch "rpm/test-packaging" to test RPM package changes

commands:
  setup_go_modules:
    steps:
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
            - go-mod-v1-
      - run:
          name: Download dependencies
          command: go mod download
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - ~/go/pkg/mod

executors:
  go-executor:
    docker:
      - image: cimg/go:1.21.6
    working_directory: ~/repo
  
  docker-executor:
    docker:
      - image: cimg/go:1.21.6
    working_directory: ~/repo

jobs:
  # First: Build the application
  build:
    executor: go-executor
    steps:
      - checkout
      - setup_go_modules
      - run:
          name: Build current platform binary
          command: |
            set -e
            echo "Building sqlite-otel binary..."
            make build
            # Verify binary was created
            if [ ! -f "sqlite-otel" ]; then
              echo "Error: Binary sqlite-otel not found after build"
              exit 1
            fi
            echo "Binary built successfully: $(ls -la sqlite-otel)"
      - run:
          name: Build for all platforms
          command: |
            set -e
            echo "Building for all platforms..."
            make build-all
            echo "Cross-platform build complete:"
            ls -la dist/
      - run:
          name: Test binary execution
          command: |
            set -e
            echo "Testing binary execution..."
            ./sqlite-otel --version
            echo "Binary executes successfully"
      - run:
          name: Collect binaries
          command: |
            set -e
            mkdir -p binaries
            cp sqlite-otel binaries/
            cp dist/* binaries/ 2>/dev/null || true
            echo "Collected binaries:"
            ls -la binaries/
      - store_artifacts:
          path: binaries/
          destination: binaries
      - persist_to_workspace:
          root: .
          paths:
            - sqlite-otel
            - binaries/
            - dist/

  # Second: Run tests (after successful build)
  test:
    executor: go-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup_go_modules
      - run:
          name: Run go vet
          command: |
            echo "Running go vet..."
            go vet ./...
      - run:
          name: Install test reporter
          command: go install github.com/jstemmer/go-junit-report/v2@latest
      - run:
          name: Run tests with race detection
          command: |
            set -e
            echo "Running tests with race detection..."
            mkdir -p /tmp/test-results
            # Run tests and capture both stdout and exit code
            go test -race -coverprofile=coverage.out -v ./... 2>&1 | tee /tmp/test-results/go-test.out
            # Capture the exit code from go test (not tee)
            test_exit_code=${PIPESTATUS[0]}
            # Convert to JUnit XML format for CircleCI
            cat /tmp/test-results/go-test.out | go-junit-report -set-exit-code > /tmp/test-results/junit.xml
            # Exit with the original test exit code
            exit $test_exit_code
      - run:
          name: Generate coverage report
          command: |
            set -e
            echo "Generating coverage report..."
            go tool cover -html=coverage.out -o coverage.html
            echo "Coverage report generated"
            # Display coverage summary
            go tool cover -func=coverage.out | tail -1
      - run:
          name: Test binary functionality
          command: |
            set -e
            echo "Testing binary functionality..."
            # Start the binary in background
            timeout 5 ./sqlite-otel --port 0 --db-path ./test.db || true
            echo "Binary functionality test completed"
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: coverage.html
          destination: coverage
      - store_artifacts:
          path: coverage.out
          destination: coverage.out

  # Third: Build and validate Docker container (simplified)
  docker-build-and-test:
    machine:
      image: ubuntu-2204:2024.01.1
    resource_class: large
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Build Docker image
          command: |
            set -e
            echo "Building Docker image..."
            
            # Simple Docker build with error handling
            docker build -t sqlite-otel-collector:test .
            echo "✅ Docker image built successfully"
            
            # Show basic image info
            docker images sqlite-otel-collector:test
      - run:
          name: Test Docker container basic functionality
          command: |
            set -e
            echo "Testing Docker container..."
            
            # Clean up any existing containers
            docker rm -f sqlite-otel-test 2>/dev/null || true
            
            # Start container
            echo "Starting container..."
            docker run -d --name sqlite-otel-test -p 25318:4318 sqlite-otel-collector:test
            
            # Wait for startup
            echo "Waiting for container startup..."
            sleep 15
            
            # Check if container is running
            if ! docker ps | grep -q sqlite-otel-test; then
              echo "ERROR: Container is not running"
              echo "Container logs:"
              docker logs sqlite-otel-test
              exit 1
            fi
            echo "✅ Container is running"
            
            # Simple health check
            echo "Testing health endpoint..."
            for i in {1..10}; do
              if curl -f http://localhost:25318/health; then
                echo "✅ Health check passed"
                break
              else
                if [ $i -eq 10 ]; then
                  echo "ERROR: Health check failed"
                  docker logs sqlite-otel-test
                  exit 1
                fi
                echo "Retrying health check ($i/10)..."
                sleep 3
              fi
            done
            
            echo "✅ Docker container test completed successfully"
      - run:
          name: Cleanup
          command: |
            docker stop sqlite-otel-test || true
            docker rm sqlite-otel-test || true
            echo "Cleanup completed"

  # Fourth: Build DEB package (for deb/* branches and version tags)
  deb-build-and-test:
    executor: go-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install DEB packaging tools
          command: |
            set -e
            echo "Installing DEB packaging tools..."
            sudo apt-get update
            sudo apt-get install -y build-essential devscripts debhelper dpkg-dev
            
            # Install Go SQLite dependencies for packaging
            echo "Installing Go SQLite dependencies..."
            sudo apt-get install -y libsqlite3-dev golang-github-mattn-go-sqlite3-dev || {
              echo "Warning: golang-github-mattn-go-sqlite3-dev not available in this environment"
              echo "Falling back to basic libsqlite3-dev only"
              sudo apt-get install -y libsqlite3-dev
            }
            echo "✅ DEB packaging tools installed"
      - run:
          name: Build DEB package
          command: |
            set -e
            echo "Building DEB package..."
            
            # Build the DEB package using the existing Makefile target
            # If build dependencies are missing, the script will handle it gracefully
            make package-deb
            echo "✅ DEB package built successfully"
            
            # Show package info
            echo "DEB package details:"
            ls -la dist/deb/
            if [ -f dist/deb/sqlite-otel-collector_*.deb ]; then
              dpkg --info dist/deb/sqlite-otel-collector_*.deb
              echo "Package contents:"
              dpkg --contents dist/deb/sqlite-otel-collector_*.deb
            fi
      - run:
          name: Test DEB package installation
          command: |
            set -e
            echo "Testing DEB package installation..."
            
            # Find the built package
            DEB_FILE=$(find dist/deb -name "sqlite-otel-collector_*.deb" | head -1)
            if [ -z "$DEB_FILE" ]; then
              echo "ERROR: No DEB package found"
              exit 1
            fi
            
            echo "Testing package: $DEB_FILE"
            
            # Test package installation (dry run first)
            echo "Testing package dependencies..."
            sudo dpkg --dry-run -i "$DEB_FILE"
            
            # Actually install the package
            echo "Installing package..."
            sudo dpkg -i "$DEB_FILE" || {
              echo "Installation failed, trying to fix dependencies..."
              sudo apt-get install -f -y
            }
            
            # Verify installation
            echo "Verifying installation..."
            dpkg -l | grep sqlite-otel-collector
            
            # Check if binary is installed correctly
            if [ -f /usr/bin/sqlite-otel-collector ]; then
              echo "✅ Binary installed at /usr/bin/sqlite-otel-collector"
              /usr/bin/sqlite-otel-collector --version
            else
              echo "ERROR: Binary not found at expected location"
              exit 1
            fi
            
            # Check systemd service (don't start it, just verify it exists)
            if systemctl list-unit-files | grep -q sqlite-otel-collector; then
              echo "✅ Systemd service installed"
              systemctl status sqlite-otel-collector --no-pager || true
            else
              echo "WARNING: Systemd service not found"
            fi
            
            echo "✅ DEB package installation test completed successfully"
      - run:
          name: Test DEB package removal
          command: |
            set -e
            echo "Testing DEB package removal..."
            
            # Remove the package
            sudo dpkg -r sqlite-otel-collector
            
            # Verify removal
            if ! dpkg -l | grep -q sqlite-otel-collector; then
              echo "✅ Package removed successfully"
            else
              echo "WARNING: Package still appears in dpkg list"
            fi
            
            # Check if binary was removed
            if [ ! -f /usr/bin/sqlite-otel-collector ]; then
              echo "✅ Binary removed successfully"
            else
              echo "WARNING: Binary still exists after package removal"
            fi
            
            echo "✅ DEB package removal test completed"
      - store_artifacts:
          path: dist/deb/
          destination: deb-packages

  # Fifth: Build RPM package (for rpm/* branches and version tags)
  rpm-build-and-test:
    executor: go-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install RPM packaging tools
          command: |
            set -e
            echo "Installing RPM packaging tools..."
            sudo apt-get update
            sudo apt-get install -y rpm build-essential
            
            # Install Go SQLite dependencies for packaging
            echo "Installing Go SQLite dependencies..."
            sudo apt-get install -y libsqlite3-dev || {
              echo "Warning: libsqlite3-dev not available in this environment"
              echo "Continuing without SQLite dev libraries"
            }
            echo "✅ RPM packaging tools installed"
      - run:
          name: Build RPM package
          command: |
            set -e
            echo "Building RPM package..."
            
            # Build the RPM package using the existing Makefile target
            make package-rpm
            echo "✅ RPM package built successfully"
            
            # Show package info
            echo "RPM package details:"
            ls -la dist/rpm/
            if [ -f dist/rpm/sqlite-otel-collector-*.rpm ]; then
              rpm -qip dist/rpm/sqlite-otel-collector-*.rpm
              echo "Package contents:"
              rpm -qlp dist/rpm/sqlite-otel-collector-*.rpm
            fi
      - run:
          name: Test RPM package installation
          command: |
            set -e
            echo "Testing RPM package installation..."
            
            # Find the built package
            RPM_FILE=$(find dist/rpm -name "sqlite-otel-collector-*.rpm" | head -1)
            if [ -z "$RPM_FILE" ]; then
              echo "ERROR: No RPM package found"
              exit 1
            fi
            
            echo "Testing package: $RPM_FILE"
            
            # Test package installation (test mode first)
            echo "Testing package dependencies..."
            rpm -qp --requires "$RPM_FILE"
            
            # Actually install the package
            echo "Installing package..."
            sudo rpm -ivh "$RPM_FILE" || {
              echo "Installation completed with warnings (expected in container environment)"
            }
            
            # Verify installation
            echo "Verifying installation..."
            rpm -q sqlite-otel-collector || echo "Package query failed (expected in container)"
            
            # Check if binary is installed correctly
            if [ -f /usr/bin/sqlite-otel-collector ]; then
              echo "✅ Binary installed at /usr/bin/sqlite-otel-collector"
              /usr/bin/sqlite-otel-collector --version
            else
              echo "WARNING: Binary not found at expected location (may be container limitation)"
            fi
            
            echo "✅ RPM package installation test completed"
      - run:
          name: Test RPM package removal
          command: |
            set -e
            echo "Testing RPM package removal..."
            
            # Remove the package
            sudo rpm -e sqlite-otel-collector || echo "Package removal completed with warnings"
            
            # Verify removal
            if ! rpm -q sqlite-otel-collector >/dev/null 2>&1; then
              echo "✅ Package removed successfully"
            else
              echo "WARNING: Package still appears in rpm database"
            fi
            
            echo "✅ RPM package removal test completed"
      - store_artifacts:
          path: dist/rpm/
          destination: rpm-packages

  # Sixth: Create release (only for tags)
  release:
    executor: go-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Create release archives
          command: |
            echo "Creating release archives..."
            make release
            echo "Release archives created:"
            ls -la releases/
      - store_artifacts:
          path: releases/
          destination: releases

  # GitHub Container Registry Docker publishing
  docker-publish:
    machine:
      image: ubuntu-2204:2024.01.1
    resource_class: medium
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Set up Docker Buildx
          command: |
            # Install Docker Buildx
            docker buildx create --name multiplatform --driver docker-container --use
            docker buildx inspect --bootstrap
      - run:
          name: Determine version and tags
          command: |
            set -e
            
            # Determine version based on branch/tag
            if [ -n "$CIRCLE_TAG" ]; then
              # Tag build - stable version
              VERSION=$CIRCLE_TAG
              IMAGE_TAG=$VERSION
              ADDITIONAL_TAGS="latest"
              echo "Building stable release: $VERSION"
            elif [ "$CIRCLE_BRANCH" = "main" ]; then
              # Main branch - development version
              VERSION=$(./sqlite-otel --version | head -1 | awk '{print $2}')
              IMAGE_TAG="${VERSION}-dev"
              ADDITIONAL_TAGS=""
              echo "Building development version from main: $IMAGE_TAG"
            elif [[ "$CIRCLE_BRANCH" =~ ^docker/.* ]]; then
              # Docker branch - development version
              VERSION=$(./sqlite-otel --version | head -1 | awk '{print $2}')
              BRANCH_SUFFIX=$(echo $CIRCLE_BRANCH | sed 's/docker\///' | sed 's/[^a-zA-Z0-9]/-/g')
              IMAGE_TAG="${VERSION}-dev-${BRANCH_SUFFIX}"
              ADDITIONAL_TAGS=""
              echo "Building development version from docker branch: $IMAGE_TAG"
            else
              echo "Unexpected branch/tag context"
              exit 1
            fi
            
            # Export variables for later steps
            echo "export VERSION='$VERSION'" >> $BASH_ENV
            echo "export IMAGE_TAG='$IMAGE_TAG'" >> $BASH_ENV
            echo "export ADDITIONAL_TAGS='$ADDITIONAL_TAGS'" >> $BASH_ENV
            
            echo "Version: $VERSION"
            echo "Image Tag: $IMAGE_TAG"
            echo "Additional Tags: $ADDITIONAL_TAGS"
      - run:
          name: Debug environment variables
          command: |
            echo "=== Environment Debug ==="
            echo "CIRCLE_PROJECT_USERNAME: $CIRCLE_PROJECT_USERNAME"
            echo "CIRCLE_PROJECT_REPONAME: $CIRCLE_PROJECT_REPONAME"
            echo "CIRCLE_BRANCH: $CIRCLE_BRANCH"
            echo "CIRCLE_TAG: $CIRCLE_TAG"
            echo "GITHUB_USERNAME: $GITHUB_USERNAME"
            echo "GITHUB_TOKEN present: $(if [ -n "$GITHUB_TOKEN" ]; then echo 'YES'; else echo 'NO'; fi)"
            echo "VERSION: $VERSION"
            echo "IMAGE_TAG: $IMAGE_TAG"
            echo "========================="
      - run:
          name: Login to GitHub Container Registry
          command: |
            # Use CIRCLE_PROJECT_USERNAME if GITHUB_USERNAME is not set
            GITHUB_USER=${GITHUB_USERNAME:-$CIRCLE_PROJECT_USERNAME}
            echo "Logging in as: $GITHUB_USER"
            echo $GITHUB_TOKEN | docker login ghcr.io -u $GITHUB_USER --password-stdin
      - run:
          name: Build and push multi-platform Docker image
          command: |
            set -e
            
            # Registry and image details
            REGISTRY="ghcr.io"
            REPO_OWNER=$(echo $CIRCLE_PROJECT_USERNAME | tr '[:upper:]' '[:lower:]')
            REPO_NAME=$(echo $CIRCLE_PROJECT_REPONAME | tr '[:upper:]' '[:lower:]')
            BASE_IMAGE="${REGISTRY}/${REPO_OWNER}/${REPO_NAME}"
            
            echo "Building and pushing to: $BASE_IMAGE"
            
            # Build tag arguments
            TAG_ARGS="--tag ${BASE_IMAGE}:${IMAGE_TAG}"
            
            # Add additional tags for stable releases
            if [ -n "$ADDITIONAL_TAGS" ]; then
              for tag in $ADDITIONAL_TAGS; do
                TAG_ARGS="$TAG_ARGS --tag ${BASE_IMAGE}:${tag}"
              done
            fi
            
            echo "Tag arguments: $TAG_ARGS"
            
            # Build and push multi-platform image
            docker buildx build \
              --platform linux/amd64,linux/arm64 \
              --push \
              $TAG_ARGS \
              --label "org.opencontainers.image.source=https://github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}" \
              --label "org.opencontainers.image.version=${VERSION}" \
              --label "org.opencontainers.image.revision=${CIRCLE_SHA1}" \
              --label "org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
              .
            
            echo "✅ Multi-platform Docker image published successfully"
            echo "Images published:"
            echo "  ${BASE_IMAGE}:${IMAGE_TAG}"
            if [ -n "$ADDITIONAL_TAGS" ]; then
              for tag in $ADDITIONAL_TAGS; do
                echo "  ${BASE_IMAGE}:${tag}"
              done
            fi

workflows:
  version: 2.1
  
  # Fast workflow for regular development (no Docker, no DEB, no RPM)
  build-and-test:
    jobs:
      - build:
          filters:
            branches:
              only: /.*/
              ignore: 
                - main
                - /docker\/.*/
                - /deb\/.*/
                - /rpm\/.*/
            tags:
              ignore: /.*/
      - test:
          requires:
            - build
          filters:
            branches:
              only: /.*/
              ignore: 
                - main
                - /docker\/.*/
                - /deb\/.*/
                - /rpm\/.*/
            tags:
              ignore: /.*/
  
  # Main branch Docker publishing (development builds)
  main-docker-workflow:
    jobs:
      - build:
          filters:
            branches:
              only: main
            tags:
              ignore: /.*/
      - test:
          requires:
            - build
          filters:
            branches:
              only: main
            tags:
              ignore: /.*/
      - docker-build-and-test:
          requires:
            - test
          filters:
            branches:
              only: main
            tags:
              ignore: /.*/
      - docker-publish:
          requires:
            - docker-build-and-test
          filters:
            branches:
              only: main
            tags:
              ignore: /.*/

  # Docker testing and publishing for docker/* branches and version tags
  docker-workflow:
    jobs:
      - build:
          filters:
            branches:
              only: /docker\/.*/
            tags:
              only: /^v.*/
      - test:
          requires:
            - build
          filters:
            branches:
              only: /docker\/.*/
            tags:
              only: /^v.*/
      - docker-build-and-test:
          requires:
            - test
          filters:
            branches:
              only: /docker\/.*/
            tags:
              only: /^v.*/
      - docker-publish:
          requires:
            - docker-build-and-test
          filters:
            branches:
              only: /docker\/.*/
            tags:
              only: /^v.*/
      - release:
          requires:
            - docker-publish
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
  
  # DEB packaging for deb/* branches and version tags
  deb-workflow:
    jobs:
      - build:
          filters:
            branches:
              only: /deb\/.*/
            tags:
              only: /^v.*/
      - test:
          requires:
            - build
          filters:
            branches:
              only: /deb\/.*/
            tags:
              only: /^v.*/
      - deb-build-and-test:
          requires:
            - test
          filters:
            branches:
              only: /deb\/.*/
            tags:
              only: /^v.*/
      - release:
          requires:
            - deb-build-and-test
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
  
  # RPM packaging for rpm/* branches and version tags
  rpm-workflow:
    jobs:
      - build:
          filters:
            branches:
              only: /rpm\/.*/
            tags:
              only: /^v.*/
      - test:
          requires:
            - build
          filters:
            branches:
              only: /rpm\/.*/
            tags:
              only: /^v.*/
      - rpm-build-and-test:
          requires:
            - test
          filters:
            branches:
              only: /rpm\/.*/
            tags:
              only: /^v.*/
      - release:
          requires:
            - rpm-build-and-test
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/